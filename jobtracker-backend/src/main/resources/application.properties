## Application Properties generated based on the provided `.env` file.
## This file imports the adjacent .env file and maps its variables to Spring Boot configuration
## properties.  Each `${...}` expression references a variable defined in `.env`.

# Import variables from the .env file if present
spring.config.import=optional:file:.env[.properties]

# Basic application settings
spring.application.name=jobtracker-backend
server.port=8080

# MongoDB configuration
# Uses MONGODB_URI for the connection string and MONGODB_DB for the database name
spring.data.mongodb.uri=${MONGODB_URI}
spring.data.mongodb.database=${MONGODB_DB}

# Servlet multipart settings for file uploads
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# JWT (JSON Web Token) configuration
jwt.secret=${JWT_SECRET}
jwt.expiration=${JWT_EXPIRATION}

# AWS configuration
## Region used for AWS services (e.g. S3 and SES)
aws.region=${AWS_REGION}
## S3 bucket name where files are stored
aws.s3.bucket=${AWS_S3_BUCKET}
## SES email addresses for sending and testing emails
aws.ses.from-email=${AWS_SES_FROM_EMAIL}
aws.ses.test-email=${AWS_SES_TEST_EMAIL}
## AWS credentials used by Spring Cloud AWS if applicable
cloud.aws.credentials.access-key=${AWS_ACCESS_KEY_ID}
cloud.aws.credentials.secret-key=${AWS_SECRET_ACCESS_KEY}
cloud.aws.region.static=${AWS_REGION}

# External API keys for job search services
app.api.serpapi.key=${SERPAPI_KEY}
app.api.rapidapi.key=${RAPIDAPI_KEY}

# Job Data Refresh Settings
app.jobs.refresh.enabled=${JOB_REFRESH_ENABLED:true}
app.jobs.refresh.interval=${JOB_REFRESH_INTERVAL:21600000}
app.jobs.seed.enabled=${JOB_SEED_ENABLED:true}


# Profile activation; defaults to 'dev' if not explicitly set
spring.profiles.active=${SPRING_PROFILES_ACTIVE:dev}

# Log levels
logging.level.root=INFO
logging.level.com.jobtracker=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.security=INFO

# Write logs to a file and to the console
logging.file.name=jobtracker-backend.log
# (alternatively logging.file.path=logs to create a “logs” directory in the working dir)

# Management endpoints exposure
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always

# Pretty patterns (timestamp, level, thread, logger name, message)
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{36} - %msg%n

# Include detailed error messages and stacktraces in the response (helpful during integration)
server.error.include-message=always
server.error.include-stacktrace=always